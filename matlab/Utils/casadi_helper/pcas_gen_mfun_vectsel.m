function [ret] = pcas_gen_mfun_vectsel(f,fname,dir,simblk)
arguments
    f
    fname {mustBeValidVariableName}
    dir {mustBeTextScalar} = ''
    simblk = false
end
%%
%  File: pcas_gen_selector_mfun.m
%  Directory: 5_Sztaki20_Main/Utils/casadi_helper
%  Author: Peter Polcz (ppolcz@gmail.com) 
%  
%  Created on 2021. May 25. (2021a)
%

this_function_name = mfilename;
% this_function_name = 'pcas_gen_mfun_vectsel';

if isempty(dir)
    dir = pwd;
end

m = f.n_in;
args = f.mx_in;
argidx = cell(1,m);
matidx = cell(1,m);
for i = 1:m
    sz = size(args{i});
    ne = numel(args{i});
    argidx{i} = i * ones(sz);
    matidx{i} = reshape(1:ne,sz);
end

argidx_cell = num2cell(full(f(argidx{:}))');
matidx_cell = num2cell(full(f(matidx{:}))');

N = numel(argidx_cell);
assert(N == f.numel_out,'Size of output does not match!')

fun_argnames_cell = cellfun(@(j) {f.name_in(j-1)},num2cell(1:m));

fun_init = sprintf('%s = zeros(%d,%d);',f.name_out(0),size(f.mx_out(0)));

fun_core_cell = cellfun(@(i,j,k) {sprintf('%s(%d) = %s(%d);',...
        f.name_out(0),i,f.name_in(j-1),k)},...
    num2cell(1:N),...
    argidx_cell,matidx_cell);

fun_arguments = strjoin([
    {'arguments'} ...
    cellfun(@(j,arg) {
        sprintf('    %s (%d,%d) = zeros(%d,%d)',f.name_in(j-1),size(arg),size(arg))
        },num2cell(1:m),args) ...
    {'end'}
    ],newline);

fun_argnames = strjoin(fun_argnames_cell,',');
fun_signature = sprintf('function %s = %s(%s)',f.name_out(0),fname,fun_argnames);

fun_core = strjoin(fun_core_cell,newline);

fun_header_comment = sprintf([...
    '%%%%\n'...
    '%%  This is a simple selector function generated from CasADi Function.\n' ...
    '%%  \n' ...
    '%%  File: ' fname '.m\n'...
    '%%  Directory: ' dir '\n'...
    '%%  Author: Peter Polcz (ppolcz@gmail.com) \n'...
    '%%  Generated by function `' this_function_name '`\n'...
    '%%  Generated on ' datestr(now, 'yyyy. mmmm dd.') ' (' version('-release') ')\n'...
    '%%']);

if simblk
    fun_code = strjoin({
        fun_signature
        fun_header_comment
        ''
        fun_init
        ''
        fun_core
        ''
        'end'
        ''}, newline);

    open_system(dir)
    write_out_to_simulink_block(dir,fun_code)
else
    fun_code = strjoin({
        fun_signature
        fun_header_comment
        ''
        fun_arguments
        ''
        fun_init
        ''
        fun_core
        ''
        'end'
        ''}, newline);

    fid = fopen([dir filesep fname '.m'],'wt');
    fprintf(fid,'%s',fun_code);
    fclose(fid);
end

end

% Find or create block. Copied from sym/matlabFunctionBlock.
function b = getBlock(block)

    r = slroot;
    b = r.find('-isa','Stateflow.EMChart','path',block);
    if isempty(b)
        load_system('simulink');
        add_block('simulink/User-Defined Functions/MATLAB Function',block);
        b = r.find('-isa','Stateflow.EMChart','path',block);
        if isempty(b)
            error(message('symbolic:sym:matlabFunctionBlock:CouldNotCreate', block));
        end
    end
    if size(b) > 1
        error(message('symbolic:sym:matlabFunctionBlock:AmbiguousBlock', block));
    end
    if ~isa(b,'Stateflow.EMChart')
        error(message('symbolic:sym:matlabFunctionBlock:InvalidBlock', block));
    end
end

function write_out_to_simulink_block(block,fun_code)
    if isstring(block) && isscalar(block)
        block = char(block);
    end
    b = getBlock(block)
    b.Script = fun_code;
%     fun_code
end